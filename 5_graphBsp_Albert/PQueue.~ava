import java.util.ArrayList;

public class PQueue<ContentType>{
  
  private class QueueNode {

    private ContentType content = null;
    private QueueNode nextNode = null;
    
    public QueueNode(ContentType pContent) {
      content = pContent;
      nextNode = null;
    }

    public void setNext(QueueNode pNext) {
      nextNode = pNext;
    }
    
    public QueueNode getNext() {
      return nextNode;
    }
    
    public ContentType getContent() {
      return content;
    }
    
  }
  
  private QueueNode head;
  private QueueNode tail;
  
  public PQueue() {
    head = null;
    tail = null;
  }
  
  public boolean isEmpty() {
    return head == null;
  }
  
  public void getValues(){
    Graph g = new Graph();  
    
    List<Edge> e = g.getEdges();
    e.toFirst();
    
    while(e.hasAccess()){    
      Vertex[] v = e.getContent().getVertices();
      ArrayList<Pair<v[1].getID(),v[2].getID(), int a >> VList = new ArrayList<>();
    }
  }
  
  public void enqueue(ContentType pContent) {
    if (pContent != null) {
      QueueNode newNode = new QueueNode(pContent);
      if (this.isEmpty()) {
        head = newNode;
        tail = newNode;
      } else {
        tail.setNext(newNode);
        tail = newNode;
      }
    }
  }                               
  
  public void dequeue() {
    if (!this.isEmpty()) {
      head = head.getNext();
      if (this.isEmpty()) {
        head = null;
        tail = null;
      }
    }
  }
  
  public ContentType front() {
    if (this.isEmpty()) {
      return null;
    } else {
      return head.getContent();
    }
  }
  
  
  
}

  

}                          
